from typing import List, Union

import pytest

from sportorg.models.memory import (
    Course,
    CourseControl,
    Person,
    ResultSportident,
    Split,
)


def make_course(course: List[Union[int, str]]) -> Course:
    course_object = Course()
    course_object.controls = [make_course_control(code) for code in course]
    return course_object

def make_course_control(code: Union[int, str]) -> CourseControl:
    control = CourseControl()
    control.update_data({'code': code, 'length': 0})
    return control

def make_result(splits: List[int]) -> ResultSportident:
    result = ResultSportident()
    result.person = Person()
    result.splits = [make_split_control(code) for code in splits]
    return result

def make_split_control(code: int) -> Split:
    split = Split()
    split.update_data({'code': code, 'time': 0})
    return split

def check(course: List[Union[int, str]], splits: List[int]) -> bool:
    result = make_result(splits)
    course_object = make_course(course)
    return result.check(course_object)

def ok(course: List[Union[int, str]], splits: List[int]) -> bool:
    '''Проверка отметки: результат засчитан

    Parameters
    ----------
    course : List[Union[int, str]]
        Порядок прохождения дистанции
    splits : List[int]
        Отметки спортсмена на дистанции

    Returns
    -------
    bool
        Возвращает True если отметка признана правильной
    '''
    return check(course, splits)

def dsq(course: List[Union[int, str]], splits: List[int]) -> bool:
    '''Проверка отметки: результат не засчитан, нарушение порядка прохождения дистанции

    Parameters
    ----------
    course : List[Union[int, str]]
        Порядок прохождения дистанции
    splits : List[int]
        Отметки спортсмена на дистанции

    Returns
    -------
    bool
        Возвращает True если отметка признана неправильной
    '''
    return not check(course, splits)

@pytest.mark.skip(reason='Not implemented')
def test_special_symbols():
    # TODO: Протестировать возможности SportOrg для задания дистанций.
    #   31                         # Номер КП задан числом
    #   '31'                       # Номер КП задан строкой
    #   '31(31,32,33)'             # Истинный КП и допустисмые КП
    #                              # (отметка ок, но начисляется штраф?)
    #   '*(31,32,33)'              # Допустимые КП, осуществляется проверка на уникальность
    #   '%(31,32,33)'              # Допустимые КП, без проверки на уникальность
    #   '31(31-33)'                # Вместо перечисления можно задавать диапазон КП
    #   '31(31,41-43,51,61-63,70)' # Комбинация отдельных КП и диапазонов
    pass


def test_specific_order_courses():
    '''Дистанция в заданном направлении. Спортсмену необходимо пройти 
    контрольные пункты в заданном порядке. Лишние КП не учитываются.
    '''    
    assert ok(course=[31, 32, 33],
              splits=[31, 32, 33])

    # Лишний КП
    assert ok(course=[    31, 32, 33],
              splits=[99, 31, 32, 33])

    assert ok(course=[31,     32, 33],
              splits=[31, 99, 32, 33])

    assert ok(course=[31, 32, 33    ],
              splits=[31, 32, 33, 99])

    # Пропущен КП
    assert dsq(course=[31, 32, 33],
               splits=[    32, 33])

    assert dsq(course=[31, 32, 33],
               splits=[31,     33])

    assert dsq(course=[31, 32, 33],
               splits=[31, 32    ])

    assert dsq(course=[31, 32, 33],
               splits=[99, 32, 33])

    # Взят не тот КП
    assert dsq(course=[31, 32, 33],
               splits=[51, 99, 33])

    assert dsq(course=[31, 32, 33],
               splits=[31, 32, 99])

    # КП взяты не в том порядке
    assert dsq(course=[31, 32, 33],
               splits=[31, 33, 32])


def test_free_order_course():
    '''Дистанция по выбору — спортсмену необходимо собрать определённое количество КП 
    в свободном порядке. Повторно взятые КП не засчитываются. Иногда на дистанции могут 
    быть обязательные первый и/или последний КП, обязательный КП в середине дистанции,
    переворот карты.
    '''    

    # Выбор — 3 различных КП
    c           = ['*', '*', '*']
    assert  ok(c, [ 31,  32,  33])
    assert  ok(c, [ 71,  72,  73])
    assert  ok(c, [ 31,  32,  33,  34])
    assert dsq(c, [ 31,  32     ])
    assert dsq(c, [ 31,  31,  33])
    assert dsq(c, [ 31,  32,  32])
    assert dsq(c, [ 31,  32,  31])

    # Выбор: заданные номера КП
    c           = ['*(31,32,33,34)', '*(31,32,33,34)', '*(31,32,33,34)']
    assert  ok(c, [ 31,               32,               33             ])
    assert  ok(c, [ 31, 31,           32,               33             ])
    
    assert dsq(c, [ 31,               32,               73             ])
    assert dsq(c, [ 31,               32,               31             ])
    assert dsq(c, [ 31,               32                               ])

    # Выбор: заданные номера КП со сменой карты
    c           = ['*(31,32,33,34)', '*(31,32,33,34)', '*(71,72,73,74)', '*(71,72,73,74)']
    assert  ok(c, [ 31,               34,               71,               74             ])
    assert  ok(c, [ 31, 31,           34,               71,               74             ])
    assert  ok(c, [ 31, 47,           34,               71,               74             ])
    assert  ok(c, [ 31,               32, 34,           71,               74             ])
    assert  ok(c, [ 31,               32,               71,               72, 74         ])
    
    assert dsq(c, [ 31,               71,               34,               74             ])
    assert dsq(c, [ 31,               34,               74                               ])
    assert dsq(c, [ 31,               44,               71,               74             ])
    assert dsq(c, [ 31,               34,               41,               74             ])

    # Выбор + заданные КП
    c           = ['31', '*(32,33,34)', '*(32,33,34)', '70']
    assert  ok(c, [ 31,   32,            33,            70 ])
    assert  ok(c, [ 31,31,32,            33,            70 ])
    assert  ok(c, [ 31,   32,            33,            70, 71 ])
    assert  ok(c, [ 31,   32,            33, 34,        70 ])
    
    assert dsq(c, [ 71,   32,            33,            70 ])
    assert dsq(c, [ 31,   32,            33,            71 ])
    assert dsq(c, [ 31,   32,            73,            70 ])
    assert dsq(c, [ 31,   32,            32,            70 ])
    assert dsq(c, [       32,            33,            70 ])
    assert dsq(c, [ 31,   32,                           70 ])
    assert dsq(c, [ 31,   32,            33,               ])

    # Выбор + заданные КП
    c           = ['*(31,32,33)', '55', '*(31,32,33)']
    assert  ok(c, [ 31,            55,   33          ])
    assert  ok(c, [ 31, 32,        55,   33          ])
    assert  ok(c, [ 31,            55,   33, 31      ])
    assert  ok(c, [ 71, 31,        55,   33          ])
    
    assert dsq(c, [ 31,            55,   31          ])
    assert dsq(c, [ 71,            55,   33          ])
    assert dsq(c, [ 31,            75,   33          ])
    assert dsq(c, [ 31,            55,   73          ])
    assert dsq(c, [                55,   33          ])
    assert dsq(c, [ 31,                  33          ])
    assert dsq(c, [ 31,            55                ])

    # Выбор + переворот карты + обязательные первый и последний КП на каждом круге
    c           = [31, '*(33,34,35)', '*(33,34,35)', 39, 41, '*(43,44,45)', '*(43,44,45)', 49]
    assert  ok(c, [31,  33,            34,           39, 41,   45,           43,           49])
    assert  ok(c, [31,  33,            34,           39, 71, 41, 45,         43,           49])


def test_non_obvious_behavior():
    '''Неочевидное поведение при проверке дистанции. Не всегда это некорректная работа
    алгоритма, иногда может возникать из-за недочётов при составлении курсов.
    '''    
    # Выбор + заданные КП. Первый КП31 и последний КП34 включены в проверку выбора. 
    # Повторная отметка на этих КП может (ошибочно?) дать правильную отметку.
    c           = [31, '*', '*', 34]
    assert  ok(c, [31,  31,  33, 34])
    assert  ok(c, [31,  32,  34, 34])
    c           = [31, '*(31,32,33,34)', '*(31,32,33,34)', 34]
    assert  ok(c, [31,  31,               33,              34])
    assert  ok(c, [31,  32,               34,              34])

    # Выбор со сменой карты, КП50 нарисован на обоих сторонах карты как доступный для выбора.
    # У спортсмена должна быть правильная отметка: на каждом круге решает задачу: взять 2 из 3 КП.
    c           = ['*(31,32,50)', '*(31,32,50)', 90, '*(50,71,72)', '*(50,71,72)']
    assert dsq(c, [ 31,            50,           90,  71,            50          ])

    # Классическая бабочка. Можно взять контрольные пункты не в том порядке, но отметка будет ок.
    # Должен быть дисквалифицирован: нарушение порядка прохождения дистанции.
    c           = [31, 32, '*(33,35)', '*(34,36)', 32, '*(33,35)', '*(34,36)', 32, 37]
    assert  ok(c, [31, 32,  33,         36,        32,  35,         34,        32, 37])

    # Бабочка с неравными крыльями. Нарисованные в картах варианты прохождения: 
    # 1) 31 -32- -41-42-43- -32- -51-52-    -32- 39
    # 2) 31 -32- -51-52-    -32- -41-42-43- -32- 39
    # Если КП32 взять не в том порядке, вернуться на КП41, а затем 
    # правильно взять КП32 — спортсмен будет дисквалифицирован.
    # У спортсмена должна быть правильная отметка: взятие лишнего КП допустимо.
    c           = [31, 32, '*(41,51)', '*(42,52)', '*(43,32)', '*(32,41)', '*(51,42)', '*(52,43)', 32, 39]
    assert dsq(c, [31, 32,  41,         42, 32,     43,         32,         51,         52,        32, 39])


def test_butterfly_course():
    '''Рассев «бабочка» — спортсмен сначала пробегает одно крыло бабочки, затем другое
    '''    
    # Классическая бабочка — центральный КП32 необходимо взять три раза
    c           = [31, 32, '*(41,51)', '*(42,52)', 32, '*(51,41)', '*(52,42)', 32, 39]
    assert  ok(c, [31, 32,  41,         42,        32,  51,         52,        32, 39])
    assert  ok(c, [31, 32,  51,         52,        32,  41,         42,        32, 39])

    assert  ok(c, [70,31,32,41,         42,        32,  51,         52,        32, 39])
    assert  ok(c, [31, 32,  41, 70,     42,        32,  51,         52,        32, 39])
    assert  ok(c, [31, 32,  41,         42,        32,  51,         52,      32,39,70])

    assert dsq(c, [31, 32,  41,         42,        32,  41,         42,        32, 39])
    assert dsq(c, [31, 32,  51,         52,        35,  51,         52,        32, 39])
    assert dsq(c, [    32,  41,         42,        32,  51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,        32,  51,         52,        32    ])
    assert dsq(c, [31, 32,              42,        32,  51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,             51,         52,        32, 39])
    assert dsq(c, [70, 32,  41,         42,        32,  51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,        32,  51,         52,        32, 70])
    assert dsq(c, [31, 32,  70,         42,        32,  51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,        70,  51,         52,        32, 39])

    # Модифицированная бабочка — есть возвратный перегон; КП32 и КП33 надо взять по два раза
    c           = [31, 32, '*(41,51)', 33, 32, '*(51,41)', 33, 39]
    assert  ok(c, [31, 32,  41,        33, 32,  51,        33, 39])
    assert  ok(c, [31, 32,  51,        33, 32,  41,        33, 39])

    assert  ok(c, [70,31,32,41,        33, 32,  51,        33, 39])
    assert  ok(c, [31, 32,  41, 70,    33, 32,  51,        33, 39])
    assert  ok(c, [31, 32,  41,        33, 32,  51,      33,39,70])

    assert dsq(c, [31, 32,  41,        33, 32,  41,        33, 39])
    assert dsq(c, [31, 41,  32,        33, 32,  51,        33, 39])
    assert dsq(c, [31, 32,  41, 51,    33, 32,             33, 39])
    assert dsq(c, [    32,  41,        33, 32,  51,        33, 39])
    assert dsq(c, [31, 32,             33, 32,  51,        33, 39])
    assert dsq(c, [31, 32,  41,        33, 32,  51,        33    ])
    assert dsq(c, [70, 32,  41,        33, 32,  51,        33, 39])
    assert dsq(c, [31, 32,  70,        33, 32,  51,        33, 39])
    assert dsq(c, [31, 32,  41,        33, 32,  51,        33, 70])

    # Бабочка с неравными крыльями. КП32 включён в вариативную часть.
    c           = [31, 32, '*(41,51)', '*(42,52)', '*(43,32)', '*(32,41)', '*(51,42)', '*(52,43)', 32, 39]
    assert  ok(c, [31, 32,  41,         42,         43,         32,         51,         52,        32, 39])
    assert  ok(c, [31, 32,  51,         52,         32,         41,         42,         43,        32, 39])

    assert  ok(c, [70,31,32,41,         42,         43,         32,         51,         52,        32, 39])
    assert  ok(c, [31, 32,  41,         42, 70,     43,         32,         51,         52,        32, 39])
    assert  ok(c, [31, 32,  41,         42,         43,         32,         51,         52,      32,39,70])

    assert dsq(c, [31, 32,  41,         42,         43,         32,         41, 42,     43,        32, 39])
    assert dsq(c, [31, 32,  51,         52,         32,         51,         52,                    32, 39])
    assert dsq(c, [    32,  41,         42,         43,         32,         51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,                     43,         32,         51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,         43,                     51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,         43,         32,         51,         52,        32    ])
    assert dsq(c, [70, 32,  41,         42,         43,         32,         51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         70,         43,         32,         51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,         43,         70,         51,         52,        32, 39])
    assert dsq(c, [31, 32,  41,         42,         43,         32,         51,         52,        32, 70])

    # Модифицированная бабочка с неравными крыльями
    c           = [31, 32, '*(41,51)', '*(42,33)', '*(33,32)', '*(32,41)', '*(51,42)', 33, 39]
    assert  ok(c, [31, 32,  41,         42,         33,         32,         51,        33, 39])
    assert  ok(c, [31, 32,  51,         33,         32,         41,         42,        33, 39])

    assert  ok(c, [70,31,32,41,         42,         33,         32,         51,        33, 39])
    assert  ok(c, [31, 32,  41,         42, 70,     33,         32,         51,        33, 39])
    assert  ok(c, [31, 32,  41,         42,         33,         32,         51,      33,39,70])

    assert dsq(c, [31, 32,  41,         42,         33,         32,         41, 42,    33, 39])
    assert dsq(c, [31, 32,  51,         33,         32,         51,                    33, 39])
    assert dsq(c, [    32,  41,         42,         33,         32,         51,        33, 39])
    assert dsq(c, [31, 32,  41,         42,                     32,         51,        33, 39])
    assert dsq(c, [31, 32,  41,         42,         33,         32,         51,        33    ])
    assert dsq(c, [70, 32,  41,         42,         33,         32,         51,        33, 39])
    assert dsq(c, [31, 32,  41,         42,         70,         32,         51,        33, 39])
    assert dsq(c, [31, 32,  41,         42,         33,         32,         51,        33, 70])

