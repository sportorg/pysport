[tool.poetry]
name = "sportorg"
version = "1.6.0"
description = "SportOrg, python, sportident, orienteering"
authors = ["Danil Akhtarov <daxartio@gmail.com>"]

[tool.poetry.dependencies]
python = "~3.8.1"
pywin32 = {version="^228", optional = true}
pyImpinj = {version="^1.2", optional = true}
playsound = {version="=1.2.2", optional = true}
aiohttp = "^3.9.0"
boltons = "^20"
chardet = "^5.2.0"
docxtpl = "^0"
jinja2 = "^2"
markupsafe = "2.0.1"
orjson = "^3.9.5"
polib = "^1"
pydantic = "^1"
pylocker = "^3.1.0"
PySide2 = "^5"
python-dateutil = "^2"
python-dotenv = '^0.14'
pywinusb = "^0"
requests = "^2"
shiboken2 = "^5.15"
sportident = "^1"

[tool.poetry.group.dev.dependencies]
autoflake = "*"
black = ">=23"
cx_Freeze = "^6"
flake8 = "^6"
flake8-annotations-complexity = "*"
flake8-bandit = "*"
flake8-breakpoint = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-eradicate = "*"
flake8-if-expr = "*"
flake8-isort = "*"
flake8-logging-format = "*"
flake8-print = "*"
flake8-pytest = "*"
flake8-pytest-style = "*"
flake8-requirements = "*"
flake8-return = "*"
mypy = "^1.4"
pep8-naming = "*"
poethepoet = "^0.22.0"
pylint = "^2.17"
pytest = "^7.4"
pytest-cov = "*"
pytest-deadfixtures = "*"
pytest-mock = "*"
toml = "*"
types-polib = "^1.2.0.1"
types-python-dateutil = "^2.8.19.14"
types-requests = "^2.31.0.2"
types-six = "^1.16.21.9"
unify = "*"
commitizen = "^3.12.0"

[tool.poetry.extras]
win = ["pywin32", "pyImpinj", "playsound"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.env]
CODE = "tests sportorg"

[tool.poe.tasks.all]
help = "Run format lint test"
sequence = ["format", "lint", "test"]
default_item_type = "ref"

[tool.poe.tasks.test]
help = "Test with coverage"
sequence = [
    {ref = "generate-mo"},
    {cmd = "pytest -vv --cov"},
]

[tool.poe.tasks.test-fast]
help = "Test until error"
cmd = "pytest -vv --exitfirst"

[tool.poe.tasks.test-failed]
help = "Test failed"
cmd = "pytest -vv --last-failed"

[tool.poe.tasks.lint]
help = "Check code"
sequence = [
    {ref = "generate-mo"},
    # {cmd = "flake8 --jobs 4 --statistics --show-source ${CODE}"},
    # {cmd = "pylint --jobs 1 --rcfile=setup.cfg ${CODE}"},
    {cmd = "black --skip-string-normalization --line-length=88 --check ${CODE}"},
    {cmd = "pytest --dead-fixtures --dup-fixtures"},
    {cmd = "mypy ${CODE}"},
]

[tool.poe.tasks.format]
help = "Formating code"
sequence = [
    {ref = "generate-mo"},
	{cmd = "autoflake --recursive --in-place --remove-all-unused-imports ${CODE}"},
	{cmd = "isort ${CODE}"},
	{cmd = "black --skip-string-normalization --line-length=88 ${CODE}"},
	{cmd = "unify --in-place --recursive ${CODE}"},
]

[tool.poe.tasks.generate-mo]
help = "Generate mo files"
cmd = "python -m sportorg.language"

[tool.poe.tasks.run]
help = "Run"
cmd = "python SportOrg.pyw"
